"use strict";
// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
const protos = require("../protos/firestore_admin_v1_proto_api");
const assert = require("assert");
const sinon = require("sinon");
const mocha_1 = require("mocha");
const firestoreadminModule = require("../src/v1");
const stream_1 = require("stream");
const google_gax_1 = require("google-gax");
function generateSampleMessage(instance) {
    const filledObject = instance.constructor.toObject(instance, { defaults: true });
    return instance.constructor.fromObject(filledObject);
}
function stubSimpleCall(response, error) {
    return error
        ? sinon.stub().rejects(error)
        : sinon.stub().resolves([response]);
}
function stubSimpleCallWithCallback(response, error) {
    return error
        ? sinon.stub().callsArgWith(2, error)
        : sinon.stub().callsArgWith(2, null, response);
}
function stubLongRunningCall(response, callError, lroError) {
    const innerStub = lroError
        ? sinon.stub().rejects(lroError)
        : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError
        ? sinon.stub().rejects(callError)
        : sinon.stub().resolves([mockOperation]);
}
function stubLongRunningCallWithCallback(response, callError, lroError) {
    const innerStub = lroError
        ? sinon.stub().rejects(lroError)
        : sinon.stub().resolves([response]);
    const mockOperation = {
        promise: innerStub,
    };
    return callError
        ? sinon.stub().callsArgWith(2, callError)
        : sinon.stub().callsArgWith(2, null, mockOperation);
}
function stubPageStreamingCall(responses, error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error
        ? sinon.stub().callsArgWith(2, error)
        : pagingStub;
    const mockStream = new stream_1.PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => {
                mockStream.write({});
            });
        }
        setImmediate(() => {
            mockStream.end();
        });
    }
    else {
        setImmediate(() => {
            mockStream.write({});
        });
        setImmediate(() => {
            mockStream.end();
        });
    }
    return sinon.stub().returns(mockStream);
}
function stubAsyncIterationCall(responses, error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses.length) {
                        return Promise.resolve({ done: true, value: undefined });
                    }
                    return Promise.resolve({ done: false, value: responses[counter++] });
                },
            };
        },
    };
    return sinon.stub().returns(asyncIterable);
}
mocha_1.describe('v1.FirestoreAdminClient', () => {
    mocha_1.it('has servicePath', () => {
        const servicePath = firestoreadminModule.FirestoreAdminClient.servicePath;
        assert(servicePath);
    });
    mocha_1.it('has apiEndpoint', () => {
        const apiEndpoint = firestoreadminModule.FirestoreAdminClient.apiEndpoint;
        assert(apiEndpoint);
    });
    mocha_1.it('has port', () => {
        const port = firestoreadminModule.FirestoreAdminClient.port;
        assert(port);
        assert(typeof port === 'number');
    });
    mocha_1.it('should create a client with no option', () => {
        const client = new firestoreadminModule.FirestoreAdminClient();
        assert(client);
    });
    mocha_1.it('should create a client with gRPC fallback', () => {
        const client = new firestoreadminModule.FirestoreAdminClient({
            fallback: true,
        });
        assert(client);
    });
    mocha_1.it('has initialize method and supports deferred initialization', async () => {
        const client = new firestoreadminModule.FirestoreAdminClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        assert.strictEqual(client.firestoreAdminStub, undefined);
        await client.initialize();
        assert(client.firestoreAdminStub);
    });
    mocha_1.it('has close method', () => {
        const client = new firestoreadminModule.FirestoreAdminClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.close();
    });
    mocha_1.it('has getProjectId method', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new firestoreadminModule.FirestoreAdminClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
        const result = await client.getProjectId();
        assert.strictEqual(result, fakeProjectId);
        assert(client.auth.getProjectId.calledWithExactly());
    });
    mocha_1.it('has getProjectId method with callback', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new firestoreadminModule.FirestoreAdminClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.auth.getProjectId = sinon
            .stub()
            .callsArgWith(0, null, fakeProjectId);
        const promise = new Promise((resolve, reject) => {
            client.getProjectId((err, projectId) => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(projectId);
                }
            });
        });
        const result = await promise;
        assert.strictEqual(result, fakeProjectId);
    });
    mocha_1.describe('getIndex', () => {
        mocha_1.it('invokes getIndex without error', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.admin.v1.GetIndexRequest());
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.firestore.admin.v1.Index());
            client.innerApiCalls.getIndex = stubSimpleCall(expectedResponse);
            const [response] = await client.getIndex(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.getIndex
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
        mocha_1.it('invokes getIndex without error using callback', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.admin.v1.GetIndexRequest());
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.firestore.admin.v1.Index());
            client.innerApiCalls.getIndex = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.getIndex(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.getIndex
                .getCall(0)
                .calledWith(request, expectedOptions /*, callback defined above */));
        });
        mocha_1.it('invokes getIndex with error', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.admin.v1.GetIndexRequest());
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getIndex = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getIndex(request), expectedError);
            assert(client.innerApiCalls.getIndex
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
    });
    mocha_1.describe('deleteIndex', () => {
        mocha_1.it('invokes deleteIndex without error', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.admin.v1.DeleteIndexRequest());
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteIndex = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteIndex(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.deleteIndex
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
        mocha_1.it('invokes deleteIndex without error using callback', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.admin.v1.DeleteIndexRequest());
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteIndex = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.deleteIndex(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.deleteIndex
                .getCall(0)
                .calledWith(request, expectedOptions /*, callback defined above */));
        });
        mocha_1.it('invokes deleteIndex with error', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.admin.v1.DeleteIndexRequest());
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteIndex = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteIndex(request), expectedError);
            assert(client.innerApiCalls.deleteIndex
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
    });
    mocha_1.describe('getField', () => {
        mocha_1.it('invokes getField without error', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.admin.v1.GetFieldRequest());
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.firestore.admin.v1.Field());
            client.innerApiCalls.getField = stubSimpleCall(expectedResponse);
            const [response] = await client.getField(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.getField
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
        mocha_1.it('invokes getField without error using callback', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.admin.v1.GetFieldRequest());
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.firestore.admin.v1.Field());
            client.innerApiCalls.getField = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.getField(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.getField
                .getCall(0)
                .calledWith(request, expectedOptions /*, callback defined above */));
        });
        mocha_1.it('invokes getField with error', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.admin.v1.GetFieldRequest());
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getField = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getField(request), expectedError);
            assert(client.innerApiCalls.getField
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
    });
    mocha_1.describe('createIndex', () => {
        mocha_1.it('invokes createIndex without error', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.admin.v1.CreateIndexRequest());
            request.parent = '';
            const expectedHeaderRequestParams = 'parent=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createIndex = stubLongRunningCall(expectedResponse);
            const [operation] = await client.createIndex(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.createIndex
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
        mocha_1.it('invokes createIndex without error using callback', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.admin.v1.CreateIndexRequest());
            request.parent = '';
            const expectedHeaderRequestParams = 'parent=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.createIndex = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.createIndex(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const operation = (await promise);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.createIndex
                .getCall(0)
                .calledWith(request, expectedOptions /*, callback defined above */));
        });
        mocha_1.it('invokes createIndex with call error', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.admin.v1.CreateIndexRequest());
            request.parent = '';
            const expectedHeaderRequestParams = 'parent=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createIndex = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.createIndex(request), expectedError);
            assert(client.innerApiCalls.createIndex
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
        mocha_1.it('invokes createIndex with LRO error', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.admin.v1.CreateIndexRequest());
            request.parent = '';
            const expectedHeaderRequestParams = 'parent=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createIndex = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.createIndex(request);
            await assert.rejects(operation.promise(), expectedError);
            assert(client.innerApiCalls.createIndex
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
        mocha_1.it('invokes checkCreateIndexProgress without error', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = { type_url: 'url', value: Buffer.from('') };
            expectedResponse.metadata = { type_url: 'url', value: Buffer.from('') };
            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkCreateIndexProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert(client.operationsClient.getOperation.getCall(0));
        });
        mocha_1.it('invokes checkCreateIndexProgress with error', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');
            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkCreateIndexProgress(''), expectedError);
            assert(client.operationsClient.getOperation.getCall(0));
        });
    });
    mocha_1.describe('updateField', () => {
        mocha_1.it('invokes updateField without error', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.admin.v1.UpdateFieldRequest());
            request.field = {};
            request.field.name = '';
            const expectedHeaderRequestParams = 'field.name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.updateField = stubLongRunningCall(expectedResponse);
            const [operation] = await client.updateField(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.updateField
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
        mocha_1.it('invokes updateField without error using callback', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.admin.v1.UpdateFieldRequest());
            request.field = {};
            request.field.name = '';
            const expectedHeaderRequestParams = 'field.name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.updateField = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.updateField(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const operation = (await promise);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.updateField
                .getCall(0)
                .calledWith(request, expectedOptions /*, callback defined above */));
        });
        mocha_1.it('invokes updateField with call error', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.admin.v1.UpdateFieldRequest());
            request.field = {};
            request.field.name = '';
            const expectedHeaderRequestParams = 'field.name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateField = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.updateField(request), expectedError);
            assert(client.innerApiCalls.updateField
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
        mocha_1.it('invokes updateField with LRO error', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.admin.v1.UpdateFieldRequest());
            request.field = {};
            request.field.name = '';
            const expectedHeaderRequestParams = 'field.name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateField = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.updateField(request);
            await assert.rejects(operation.promise(), expectedError);
            assert(client.innerApiCalls.updateField
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
        mocha_1.it('invokes checkUpdateFieldProgress without error', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = { type_url: 'url', value: Buffer.from('') };
            expectedResponse.metadata = { type_url: 'url', value: Buffer.from('') };
            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkUpdateFieldProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert(client.operationsClient.getOperation.getCall(0));
        });
        mocha_1.it('invokes checkUpdateFieldProgress with error', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');
            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkUpdateFieldProgress(''), expectedError);
            assert(client.operationsClient.getOperation.getCall(0));
        });
    });
    mocha_1.describe('exportDocuments', () => {
        mocha_1.it('invokes exportDocuments without error', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.admin.v1.ExportDocumentsRequest());
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.exportDocuments = stubLongRunningCall(expectedResponse);
            const [operation] = await client.exportDocuments(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.exportDocuments
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
        mocha_1.it('invokes exportDocuments without error using callback', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.admin.v1.ExportDocumentsRequest());
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.exportDocuments = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.exportDocuments(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const operation = (await promise);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.exportDocuments
                .getCall(0)
                .calledWith(request, expectedOptions /*, callback defined above */));
        });
        mocha_1.it('invokes exportDocuments with call error', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.admin.v1.ExportDocumentsRequest());
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.exportDocuments = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.exportDocuments(request), expectedError);
            assert(client.innerApiCalls.exportDocuments
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
        mocha_1.it('invokes exportDocuments with LRO error', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.admin.v1.ExportDocumentsRequest());
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.exportDocuments = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.exportDocuments(request);
            await assert.rejects(operation.promise(), expectedError);
            assert(client.innerApiCalls.exportDocuments
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
        mocha_1.it('invokes checkExportDocumentsProgress without error', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = { type_url: 'url', value: Buffer.from('') };
            expectedResponse.metadata = { type_url: 'url', value: Buffer.from('') };
            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkExportDocumentsProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert(client.operationsClient.getOperation.getCall(0));
        });
        mocha_1.it('invokes checkExportDocumentsProgress with error', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');
            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkExportDocumentsProgress(''), expectedError);
            assert(client.operationsClient.getOperation.getCall(0));
        });
    });
    mocha_1.describe('importDocuments', () => {
        mocha_1.it('invokes importDocuments without error', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.admin.v1.ImportDocumentsRequest());
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.importDocuments = stubLongRunningCall(expectedResponse);
            const [operation] = await client.importDocuments(request);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.importDocuments
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
        mocha_1.it('invokes importDocuments without error using callback', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.admin.v1.ImportDocumentsRequest());
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.longrunning.Operation());
            client.innerApiCalls.importDocuments = stubLongRunningCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.importDocuments(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const operation = (await promise);
            const [response] = await operation.promise();
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.importDocuments
                .getCall(0)
                .calledWith(request, expectedOptions /*, callback defined above */));
        });
        mocha_1.it('invokes importDocuments with call error', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.admin.v1.ImportDocumentsRequest());
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.importDocuments = stubLongRunningCall(undefined, expectedError);
            await assert.rejects(client.importDocuments(request), expectedError);
            assert(client.innerApiCalls.importDocuments
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
        mocha_1.it('invokes importDocuments with LRO error', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.admin.v1.ImportDocumentsRequest());
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.importDocuments = stubLongRunningCall(undefined, undefined, expectedError);
            const [operation] = await client.importDocuments(request);
            await assert.rejects(operation.promise(), expectedError);
            assert(client.innerApiCalls.importDocuments
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
        mocha_1.it('invokes checkImportDocumentsProgress without error', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const expectedResponse = generateSampleMessage(new google_gax_1.operationsProtos.google.longrunning.Operation());
            expectedResponse.name = 'test';
            expectedResponse.response = { type_url: 'url', value: Buffer.from('') };
            expectedResponse.metadata = { type_url: 'url', value: Buffer.from('') };
            client.operationsClient.getOperation = stubSimpleCall(expectedResponse);
            const decodedOperation = await client.checkImportDocumentsProgress(expectedResponse.name);
            assert.deepStrictEqual(decodedOperation.name, expectedResponse.name);
            assert(decodedOperation.metadata);
            assert(client.operationsClient.getOperation.getCall(0));
        });
        mocha_1.it('invokes checkImportDocumentsProgress with error', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const expectedError = new Error('expected');
            client.operationsClient.getOperation = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.checkImportDocumentsProgress(''), expectedError);
            assert(client.operationsClient.getOperation.getCall(0));
        });
    });
    mocha_1.describe('listIndexes', () => {
        mocha_1.it('invokes listIndexes without error', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.admin.v1.ListIndexesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = 'parent=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
                generateSampleMessage(new protos.google.firestore.admin.v1.Index()),
                generateSampleMessage(new protos.google.firestore.admin.v1.Index()),
                generateSampleMessage(new protos.google.firestore.admin.v1.Index()),
            ];
            client.innerApiCalls.listIndexes = stubSimpleCall(expectedResponse);
            const [response] = await client.listIndexes(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.listIndexes
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
        mocha_1.it('invokes listIndexes without error using callback', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.admin.v1.ListIndexesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = 'parent=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
                generateSampleMessage(new protos.google.firestore.admin.v1.Index()),
                generateSampleMessage(new protos.google.firestore.admin.v1.Index()),
                generateSampleMessage(new protos.google.firestore.admin.v1.Index()),
            ];
            client.innerApiCalls.listIndexes = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.listIndexes(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.listIndexes
                .getCall(0)
                .calledWith(request, expectedOptions /*, callback defined above */));
        });
        mocha_1.it('invokes listIndexes with error', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.admin.v1.ListIndexesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = 'parent=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listIndexes = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listIndexes(request), expectedError);
            assert(client.innerApiCalls.listIndexes
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
        mocha_1.it('invokes listIndexesStream without error', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.admin.v1.ListIndexesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = 'parent=';
            const expectedResponse = [
                generateSampleMessage(new protos.google.firestore.admin.v1.Index()),
                generateSampleMessage(new protos.google.firestore.admin.v1.Index()),
                generateSampleMessage(new protos.google.firestore.admin.v1.Index()),
            ];
            client.descriptors.page.listIndexes.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listIndexesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses = [];
                stream.on('data', (response) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert(client.descriptors.page.listIndexes.createStream
                .getCall(0)
                .calledWith(client.innerApiCalls.listIndexes, request));
            assert.strictEqual(client.descriptors.page.listIndexes.createStream.getCall(0).args[2].otherArgs.headers['x-goog-request-params'], expectedHeaderRequestParams);
        });
        mocha_1.it('invokes listIndexesStream with error', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.admin.v1.ListIndexesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = 'parent=';
            const expectedError = new Error('expected');
            client.descriptors.page.listIndexes.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listIndexesStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses = [];
                stream.on('data', (response) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert(client.descriptors.page.listIndexes.createStream
                .getCall(0)
                .calledWith(client.innerApiCalls.listIndexes, request));
            assert.strictEqual(client.descriptors.page.listIndexes.createStream.getCall(0).args[2].otherArgs.headers['x-goog-request-params'], expectedHeaderRequestParams);
        });
        mocha_1.it('uses async iteration with listIndexes without error', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.admin.v1.ListIndexesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = 'parent=';
            const expectedResponse = [
                generateSampleMessage(new protos.google.firestore.admin.v1.Index()),
                generateSampleMessage(new protos.google.firestore.admin.v1.Index()),
                generateSampleMessage(new protos.google.firestore.admin.v1.Index()),
            ];
            client.descriptors.page.listIndexes.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses = [];
            const iterable = client.listIndexesAsync(request);
            for await (const resource of iterable) {
                responses.push(resource);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(client.descriptors.page.listIndexes.asyncIterate.getCall(0).args[1], request);
            assert.strictEqual(client.descriptors.page.listIndexes.asyncIterate.getCall(0).args[2].otherArgs.headers['x-goog-request-params'], expectedHeaderRequestParams);
        });
        mocha_1.it('uses async iteration with listIndexes with error', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.admin.v1.ListIndexesRequest());
            request.parent = '';
            const expectedHeaderRequestParams = 'parent=';
            const expectedError = new Error('expected');
            client.descriptors.page.listIndexes.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listIndexesAsync(request);
            await assert.rejects(async () => {
                const responses = [];
                for await (const resource of iterable) {
                    responses.push(resource);
                }
            });
            assert.deepStrictEqual(client.descriptors.page.listIndexes.asyncIterate.getCall(0).args[1], request);
            assert.strictEqual(client.descriptors.page.listIndexes.asyncIterate.getCall(0).args[2].otherArgs.headers['x-goog-request-params'], expectedHeaderRequestParams);
        });
    });
    mocha_1.describe('listFields', () => {
        mocha_1.it('invokes listFields without error', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.admin.v1.ListFieldsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = 'parent=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
                generateSampleMessage(new protos.google.firestore.admin.v1.Field()),
                generateSampleMessage(new protos.google.firestore.admin.v1.Field()),
                generateSampleMessage(new protos.google.firestore.admin.v1.Field()),
            ];
            client.innerApiCalls.listFields = stubSimpleCall(expectedResponse);
            const [response] = await client.listFields(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.listFields
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
        mocha_1.it('invokes listFields without error using callback', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.admin.v1.ListFieldsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = 'parent=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
                generateSampleMessage(new protos.google.firestore.admin.v1.Field()),
                generateSampleMessage(new protos.google.firestore.admin.v1.Field()),
                generateSampleMessage(new protos.google.firestore.admin.v1.Field()),
            ];
            client.innerApiCalls.listFields = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.listFields(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.listFields
                .getCall(0)
                .calledWith(request, expectedOptions /*, callback defined above */));
        });
        mocha_1.it('invokes listFields with error', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.admin.v1.ListFieldsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = 'parent=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listFields = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listFields(request), expectedError);
            assert(client.innerApiCalls.listFields
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
        mocha_1.it('invokes listFieldsStream without error', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.admin.v1.ListFieldsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = 'parent=';
            const expectedResponse = [
                generateSampleMessage(new protos.google.firestore.admin.v1.Field()),
                generateSampleMessage(new protos.google.firestore.admin.v1.Field()),
                generateSampleMessage(new protos.google.firestore.admin.v1.Field()),
            ];
            client.descriptors.page.listFields.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listFieldsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses = [];
                stream.on('data', (response) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert(client.descriptors.page.listFields.createStream
                .getCall(0)
                .calledWith(client.innerApiCalls.listFields, request));
            assert.strictEqual(client.descriptors.page.listFields.createStream.getCall(0).args[2].otherArgs.headers['x-goog-request-params'], expectedHeaderRequestParams);
        });
        mocha_1.it('invokes listFieldsStream with error', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.admin.v1.ListFieldsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = 'parent=';
            const expectedError = new Error('expected');
            client.descriptors.page.listFields.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listFieldsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses = [];
                stream.on('data', (response) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert(client.descriptors.page.listFields.createStream
                .getCall(0)
                .calledWith(client.innerApiCalls.listFields, request));
            assert.strictEqual(client.descriptors.page.listFields.createStream.getCall(0).args[2].otherArgs.headers['x-goog-request-params'], expectedHeaderRequestParams);
        });
        mocha_1.it('uses async iteration with listFields without error', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.admin.v1.ListFieldsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = 'parent=';
            const expectedResponse = [
                generateSampleMessage(new protos.google.firestore.admin.v1.Field()),
                generateSampleMessage(new protos.google.firestore.admin.v1.Field()),
                generateSampleMessage(new protos.google.firestore.admin.v1.Field()),
            ];
            client.descriptors.page.listFields.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses = [];
            const iterable = client.listFieldsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(client.descriptors.page.listFields.asyncIterate.getCall(0).args[1], request);
            assert.strictEqual(client.descriptors.page.listFields.asyncIterate.getCall(0).args[2].otherArgs.headers['x-goog-request-params'], expectedHeaderRequestParams);
        });
        mocha_1.it('uses async iteration with listFields with error', async () => {
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.admin.v1.ListFieldsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = 'parent=';
            const expectedError = new Error('expected');
            client.descriptors.page.listFields.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listFieldsAsync(request);
            await assert.rejects(async () => {
                const responses = [];
                for await (const resource of iterable) {
                    responses.push(resource);
                }
            });
            assert.deepStrictEqual(client.descriptors.page.listFields.asyncIterate.getCall(0).args[1], request);
            assert.strictEqual(client.descriptors.page.listFields.asyncIterate.getCall(0).args[2].otherArgs.headers['x-goog-request-params'], expectedHeaderRequestParams);
        });
    });
    mocha_1.describe('Path templates', () => {
        mocha_1.describe('collectionGroup', () => {
            const fakePath = '/rendered/path/collectionGroup';
            const expectedParameters = {
                project: 'projectValue',
                database: 'databaseValue',
                collection: 'collectionValue',
            };
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.collectionGroupPathTemplate.render = sinon
                .stub()
                .returns(fakePath);
            client.pathTemplates.collectionGroupPathTemplate.match = sinon
                .stub()
                .returns(expectedParameters);
            mocha_1.it('collectionGroupPath', () => {
                const result = client.collectionGroupPath('projectValue', 'databaseValue', 'collectionValue');
                assert.strictEqual(result, fakePath);
                assert(client.pathTemplates.collectionGroupPathTemplate.render
                    .getCall(-1)
                    .calledWith(expectedParameters));
            });
            mocha_1.it('matchProjectFromCollectionGroupName', () => {
                const result = client.matchProjectFromCollectionGroupName(fakePath);
                assert.strictEqual(result, 'projectValue');
                assert(client.pathTemplates.collectionGroupPathTemplate.match
                    .getCall(-1)
                    .calledWith(fakePath));
            });
            mocha_1.it('matchDatabaseFromCollectionGroupName', () => {
                const result = client.matchDatabaseFromCollectionGroupName(fakePath);
                assert.strictEqual(result, 'databaseValue');
                assert(client.pathTemplates.collectionGroupPathTemplate.match
                    .getCall(-1)
                    .calledWith(fakePath));
            });
            mocha_1.it('matchCollectionFromCollectionGroupName', () => {
                const result = client.matchCollectionFromCollectionGroupName(fakePath);
                assert.strictEqual(result, 'collectionValue');
                assert(client.pathTemplates.collectionGroupPathTemplate.match
                    .getCall(-1)
                    .calledWith(fakePath));
            });
        });
        mocha_1.describe('database', () => {
            const fakePath = '/rendered/path/database';
            const expectedParameters = {
                project: 'projectValue',
                database: 'databaseValue',
            };
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.databasePathTemplate.render = sinon
                .stub()
                .returns(fakePath);
            client.pathTemplates.databasePathTemplate.match = sinon
                .stub()
                .returns(expectedParameters);
            mocha_1.it('databasePath', () => {
                const result = client.databasePath('projectValue', 'databaseValue');
                assert.strictEqual(result, fakePath);
                assert(client.pathTemplates.databasePathTemplate.render
                    .getCall(-1)
                    .calledWith(expectedParameters));
            });
            mocha_1.it('matchProjectFromDatabaseName', () => {
                const result = client.matchProjectFromDatabaseName(fakePath);
                assert.strictEqual(result, 'projectValue');
                assert(client.pathTemplates.databasePathTemplate.match
                    .getCall(-1)
                    .calledWith(fakePath));
            });
            mocha_1.it('matchDatabaseFromDatabaseName', () => {
                const result = client.matchDatabaseFromDatabaseName(fakePath);
                assert.strictEqual(result, 'databaseValue');
                assert(client.pathTemplates.databasePathTemplate.match
                    .getCall(-1)
                    .calledWith(fakePath));
            });
        });
        mocha_1.describe('field', () => {
            const fakePath = '/rendered/path/field';
            const expectedParameters = {
                project: 'projectValue',
                database: 'databaseValue',
                collection: 'collectionValue',
                field: 'fieldValue',
            };
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.fieldPathTemplate.render = sinon
                .stub()
                .returns(fakePath);
            client.pathTemplates.fieldPathTemplate.match = sinon
                .stub()
                .returns(expectedParameters);
            mocha_1.it('fieldPath', () => {
                const result = client.fieldPath('projectValue', 'databaseValue', 'collectionValue', 'fieldValue');
                assert.strictEqual(result, fakePath);
                assert(client.pathTemplates.fieldPathTemplate.render
                    .getCall(-1)
                    .calledWith(expectedParameters));
            });
            mocha_1.it('matchProjectFromFieldName', () => {
                const result = client.matchProjectFromFieldName(fakePath);
                assert.strictEqual(result, 'projectValue');
                assert(client.pathTemplates.fieldPathTemplate.match
                    .getCall(-1)
                    .calledWith(fakePath));
            });
            mocha_1.it('matchDatabaseFromFieldName', () => {
                const result = client.matchDatabaseFromFieldName(fakePath);
                assert.strictEqual(result, 'databaseValue');
                assert(client.pathTemplates.fieldPathTemplate.match
                    .getCall(-1)
                    .calledWith(fakePath));
            });
            mocha_1.it('matchCollectionFromFieldName', () => {
                const result = client.matchCollectionFromFieldName(fakePath);
                assert.strictEqual(result, 'collectionValue');
                assert(client.pathTemplates.fieldPathTemplate.match
                    .getCall(-1)
                    .calledWith(fakePath));
            });
            mocha_1.it('matchFieldFromFieldName', () => {
                const result = client.matchFieldFromFieldName(fakePath);
                assert.strictEqual(result, 'fieldValue');
                assert(client.pathTemplates.fieldPathTemplate.match
                    .getCall(-1)
                    .calledWith(fakePath));
            });
        });
        mocha_1.describe('index', () => {
            const fakePath = '/rendered/path/index';
            const expectedParameters = {
                project: 'projectValue',
                database: 'databaseValue',
                collection: 'collectionValue',
                index: 'indexValue',
            };
            const client = new firestoreadminModule.FirestoreAdminClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            client.pathTemplates.indexPathTemplate.render = sinon
                .stub()
                .returns(fakePath);
            client.pathTemplates.indexPathTemplate.match = sinon
                .stub()
                .returns(expectedParameters);
            mocha_1.it('indexPath', () => {
                const result = client.indexPath('projectValue', 'databaseValue', 'collectionValue', 'indexValue');
                assert.strictEqual(result, fakePath);
                assert(client.pathTemplates.indexPathTemplate.render
                    .getCall(-1)
                    .calledWith(expectedParameters));
            });
            mocha_1.it('matchProjectFromIndexName', () => {
                const result = client.matchProjectFromIndexName(fakePath);
                assert.strictEqual(result, 'projectValue');
                assert(client.pathTemplates.indexPathTemplate.match
                    .getCall(-1)
                    .calledWith(fakePath));
            });
            mocha_1.it('matchDatabaseFromIndexName', () => {
                const result = client.matchDatabaseFromIndexName(fakePath);
                assert.strictEqual(result, 'databaseValue');
                assert(client.pathTemplates.indexPathTemplate.match
                    .getCall(-1)
                    .calledWith(fakePath));
            });
            mocha_1.it('matchCollectionFromIndexName', () => {
                const result = client.matchCollectionFromIndexName(fakePath);
                assert.strictEqual(result, 'collectionValue');
                assert(client.pathTemplates.indexPathTemplate.match
                    .getCall(-1)
                    .calledWith(fakePath));
            });
            mocha_1.it('matchIndexFromIndexName', () => {
                const result = client.matchIndexFromIndexName(fakePath);
                assert.strictEqual(result, 'indexValue');
                assert(client.pathTemplates.indexPathTemplate.match
                    .getCall(-1)
                    .calledWith(fakePath));
            });
        });
    });
});
//# sourceMappingURL=gapic_firestore_admin_v1.js.map