"use strict";
// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
const protos = require("../protos/firestore_v1beta1_proto_api");
const assert = require("assert");
const sinon = require("sinon");
const mocha_1 = require("mocha");
const firestoreModule = require("../src/v1beta1");
const stream_1 = require("stream");
function generateSampleMessage(instance) {
    const filledObject = instance.constructor.toObject(instance, { defaults: true });
    return instance.constructor.fromObject(filledObject);
}
function stubSimpleCall(response, error) {
    return error
        ? sinon.stub().rejects(error)
        : sinon.stub().resolves([response]);
}
function stubSimpleCallWithCallback(response, error) {
    return error
        ? sinon.stub().callsArgWith(2, error)
        : sinon.stub().callsArgWith(2, null, response);
}
function stubServerStreamingCall(response, error) {
    const transformStub = error
        ? sinon.stub().callsArgWith(2, error)
        : sinon.stub().callsArgWith(2, null, response);
    const mockStream = new stream_1.PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // write something to the stream to trigger transformStub and send the response back to the client
    setImmediate(() => {
        mockStream.write({});
    });
    setImmediate(() => {
        mockStream.end();
    });
    return sinon.stub().returns(mockStream);
}
function stubBidiStreamingCall(response, error) {
    const transformStub = error
        ? sinon.stub().callsArgWith(2, error)
        : sinon.stub().callsArgWith(2, null, response);
    const mockStream = new stream_1.PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    return sinon.stub().returns(mockStream);
}
function stubPageStreamingCall(responses, error) {
    const pagingStub = sinon.stub();
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            pagingStub.onCall(i).callsArgWith(2, null, responses[i]);
        }
    }
    const transformStub = error
        ? sinon.stub().callsArgWith(2, error)
        : pagingStub;
    const mockStream = new stream_1.PassThrough({
        objectMode: true,
        transform: transformStub,
    });
    // trigger as many responses as needed
    if (responses) {
        for (let i = 0; i < responses.length; ++i) {
            setImmediate(() => {
                mockStream.write({});
            });
        }
        setImmediate(() => {
            mockStream.end();
        });
    }
    else {
        setImmediate(() => {
            mockStream.write({});
        });
        setImmediate(() => {
            mockStream.end();
        });
    }
    return sinon.stub().returns(mockStream);
}
function stubAsyncIterationCall(responses, error) {
    let counter = 0;
    const asyncIterable = {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    if (error) {
                        return Promise.reject(error);
                    }
                    if (counter >= responses.length) {
                        return Promise.resolve({ done: true, value: undefined });
                    }
                    return Promise.resolve({ done: false, value: responses[counter++] });
                },
            };
        },
    };
    return sinon.stub().returns(asyncIterable);
}
mocha_1.describe('v1beta1.FirestoreClient', () => {
    mocha_1.it('has servicePath', () => {
        const servicePath = firestoreModule.FirestoreClient.servicePath;
        assert(servicePath);
    });
    mocha_1.it('has apiEndpoint', () => {
        const apiEndpoint = firestoreModule.FirestoreClient.apiEndpoint;
        assert(apiEndpoint);
    });
    mocha_1.it('has port', () => {
        const port = firestoreModule.FirestoreClient.port;
        assert(port);
        assert(typeof port === 'number');
    });
    mocha_1.it('should create a client with no option', () => {
        const client = new firestoreModule.FirestoreClient();
        assert(client);
    });
    mocha_1.it('should create a client with gRPC fallback', () => {
        const client = new firestoreModule.FirestoreClient({
            fallback: true,
        });
        assert(client);
    });
    mocha_1.it('has initialize method and supports deferred initialization', async () => {
        const client = new firestoreModule.FirestoreClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        assert.strictEqual(client.firestoreStub, undefined);
        await client.initialize();
        assert(client.firestoreStub);
    });
    mocha_1.it('has close method', () => {
        const client = new firestoreModule.FirestoreClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.close();
    });
    mocha_1.it('has getProjectId method', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new firestoreModule.FirestoreClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.auth.getProjectId = sinon.stub().resolves(fakeProjectId);
        const result = await client.getProjectId();
        assert.strictEqual(result, fakeProjectId);
        assert(client.auth.getProjectId.calledWithExactly());
    });
    mocha_1.it('has getProjectId method with callback', async () => {
        const fakeProjectId = 'fake-project-id';
        const client = new firestoreModule.FirestoreClient({
            credentials: { client_email: 'bogus', private_key: 'bogus' },
            projectId: 'bogus',
        });
        client.auth.getProjectId = sinon
            .stub()
            .callsArgWith(0, null, fakeProjectId);
        const promise = new Promise((resolve, reject) => {
            client.getProjectId((err, projectId) => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(projectId);
                }
            });
        });
        const result = await promise;
        assert.strictEqual(result, fakeProjectId);
    });
    mocha_1.describe('getDocument', () => {
        mocha_1.it('invokes getDocument without error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1beta1.GetDocumentRequest());
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.firestore.v1beta1.Document());
            client.innerApiCalls.getDocument = stubSimpleCall(expectedResponse);
            const [response] = await client.getDocument(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.getDocument
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
        mocha_1.it('invokes getDocument without error using callback', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1beta1.GetDocumentRequest());
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.firestore.v1beta1.Document());
            client.innerApiCalls.getDocument = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.getDocument(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.getDocument
                .getCall(0)
                .calledWith(request, expectedOptions /*, callback defined above */));
        });
        mocha_1.it('invokes getDocument with error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1beta1.GetDocumentRequest());
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.getDocument = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.getDocument(request), expectedError);
            assert(client.innerApiCalls.getDocument
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
    });
    mocha_1.describe('createDocument', () => {
        mocha_1.it('invokes createDocument without error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1beta1.CreateDocumentRequest());
            request.parent = '';
            const expectedHeaderRequestParams = 'parent=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.firestore.v1beta1.Document());
            client.innerApiCalls.createDocument = stubSimpleCall(expectedResponse);
            const [response] = await client.createDocument(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.createDocument
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
        mocha_1.it('invokes createDocument without error using callback', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1beta1.CreateDocumentRequest());
            request.parent = '';
            const expectedHeaderRequestParams = 'parent=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.firestore.v1beta1.Document());
            client.innerApiCalls.createDocument = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.createDocument(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.createDocument
                .getCall(0)
                .calledWith(request, expectedOptions /*, callback defined above */));
        });
        mocha_1.it('invokes createDocument with error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1beta1.CreateDocumentRequest());
            request.parent = '';
            const expectedHeaderRequestParams = 'parent=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.createDocument = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.createDocument(request), expectedError);
            assert(client.innerApiCalls.createDocument
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
    });
    mocha_1.describe('updateDocument', () => {
        mocha_1.it('invokes updateDocument without error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1beta1.UpdateDocumentRequest());
            request.document = {};
            request.document.name = '';
            const expectedHeaderRequestParams = 'document.name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.firestore.v1beta1.Document());
            client.innerApiCalls.updateDocument = stubSimpleCall(expectedResponse);
            const [response] = await client.updateDocument(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.updateDocument
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
        mocha_1.it('invokes updateDocument without error using callback', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1beta1.UpdateDocumentRequest());
            request.document = {};
            request.document.name = '';
            const expectedHeaderRequestParams = 'document.name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.firestore.v1beta1.Document());
            client.innerApiCalls.updateDocument = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.updateDocument(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.updateDocument
                .getCall(0)
                .calledWith(request, expectedOptions /*, callback defined above */));
        });
        mocha_1.it('invokes updateDocument with error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1beta1.UpdateDocumentRequest());
            request.document = {};
            request.document.name = '';
            const expectedHeaderRequestParams = 'document.name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.updateDocument = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.updateDocument(request), expectedError);
            assert(client.innerApiCalls.updateDocument
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
    });
    mocha_1.describe('deleteDocument', () => {
        mocha_1.it('invokes deleteDocument without error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1beta1.DeleteDocumentRequest());
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteDocument = stubSimpleCall(expectedResponse);
            const [response] = await client.deleteDocument(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.deleteDocument
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
        mocha_1.it('invokes deleteDocument without error using callback', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1beta1.DeleteDocumentRequest());
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.deleteDocument = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.deleteDocument(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.deleteDocument
                .getCall(0)
                .calledWith(request, expectedOptions /*, callback defined above */));
        });
        mocha_1.it('invokes deleteDocument with error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1beta1.DeleteDocumentRequest());
            request.name = '';
            const expectedHeaderRequestParams = 'name=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.deleteDocument = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.deleteDocument(request), expectedError);
            assert(client.innerApiCalls.deleteDocument
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
    });
    mocha_1.describe('beginTransaction', () => {
        mocha_1.it('invokes beginTransaction without error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1beta1.BeginTransactionRequest());
            request.database = '';
            const expectedHeaderRequestParams = 'database=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.firestore.v1beta1.BeginTransactionResponse());
            client.innerApiCalls.beginTransaction = stubSimpleCall(expectedResponse);
            const [response] = await client.beginTransaction(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.beginTransaction
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
        mocha_1.it('invokes beginTransaction without error using callback', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1beta1.BeginTransactionRequest());
            request.database = '';
            const expectedHeaderRequestParams = 'database=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.firestore.v1beta1.BeginTransactionResponse());
            client.innerApiCalls.beginTransaction = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.beginTransaction(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.beginTransaction
                .getCall(0)
                .calledWith(request, expectedOptions /*, callback defined above */));
        });
        mocha_1.it('invokes beginTransaction with error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1beta1.BeginTransactionRequest());
            request.database = '';
            const expectedHeaderRequestParams = 'database=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.beginTransaction = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.beginTransaction(request), expectedError);
            assert(client.innerApiCalls.beginTransaction
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
    });
    mocha_1.describe('commit', () => {
        mocha_1.it('invokes commit without error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1beta1.CommitRequest());
            request.database = '';
            const expectedHeaderRequestParams = 'database=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.firestore.v1beta1.CommitResponse());
            client.innerApiCalls.commit = stubSimpleCall(expectedResponse);
            const [response] = await client.commit(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.commit
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
        mocha_1.it('invokes commit without error using callback', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1beta1.CommitRequest());
            request.database = '';
            const expectedHeaderRequestParams = 'database=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.firestore.v1beta1.CommitResponse());
            client.innerApiCalls.commit = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.commit(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.commit
                .getCall(0)
                .calledWith(request, expectedOptions /*, callback defined above */));
        });
        mocha_1.it('invokes commit with error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1beta1.CommitRequest());
            request.database = '';
            const expectedHeaderRequestParams = 'database=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.commit = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.commit(request), expectedError);
            assert(client.innerApiCalls.commit
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
    });
    mocha_1.describe('rollback', () => {
        mocha_1.it('invokes rollback without error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1beta1.RollbackRequest());
            request.database = '';
            const expectedHeaderRequestParams = 'database=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.rollback = stubSimpleCall(expectedResponse);
            const [response] = await client.rollback(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.rollback
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
        mocha_1.it('invokes rollback without error using callback', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1beta1.RollbackRequest());
            request.database = '';
            const expectedHeaderRequestParams = 'database=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.protobuf.Empty());
            client.innerApiCalls.rollback = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.rollback(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.rollback
                .getCall(0)
                .calledWith(request, expectedOptions /*, callback defined above */));
        });
        mocha_1.it('invokes rollback with error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1beta1.RollbackRequest());
            request.database = '';
            const expectedHeaderRequestParams = 'database=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.rollback = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.rollback(request), expectedError);
            assert(client.innerApiCalls.rollback
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
    });
    mocha_1.describe('batchGetDocuments', () => {
        mocha_1.it('invokes batchGetDocuments without error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1beta1.BatchGetDocumentsRequest());
            request.database = '';
            const expectedHeaderRequestParams = 'database=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.firestore.v1beta1.BatchGetDocumentsResponse());
            client.innerApiCalls.batchGetDocuments = stubServerStreamingCall(expectedResponse);
            const stream = client.batchGetDocuments(request);
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response) => {
                    resolve(response);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.batchGetDocuments
                .getCall(0)
                .calledWith(request, expectedOptions));
        });
        mocha_1.it('invokes batchGetDocuments with error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1beta1.BatchGetDocumentsRequest());
            request.database = '';
            const expectedHeaderRequestParams = 'database=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.batchGetDocuments = stubServerStreamingCall(undefined, expectedError);
            const stream = client.batchGetDocuments(request);
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response) => {
                    resolve(response);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert(client.innerApiCalls.batchGetDocuments
                .getCall(0)
                .calledWith(request, expectedOptions));
        });
    });
    mocha_1.describe('runQuery', () => {
        mocha_1.it('invokes runQuery without error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1beta1.RunQueryRequest());
            request.parent = '';
            const expectedHeaderRequestParams = 'parent=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = generateSampleMessage(new protos.google.firestore.v1beta1.RunQueryResponse());
            client.innerApiCalls.runQuery = stubServerStreamingCall(expectedResponse);
            const stream = client.runQuery(request);
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response) => {
                    resolve(response);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.runQuery
                .getCall(0)
                .calledWith(request, expectedOptions));
        });
        mocha_1.it('invokes runQuery with error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1beta1.RunQueryRequest());
            request.parent = '';
            const expectedHeaderRequestParams = 'parent=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.runQuery = stubServerStreamingCall(undefined, expectedError);
            const stream = client.runQuery(request);
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response) => {
                    resolve(response);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert(client.innerApiCalls.runQuery
                .getCall(0)
                .calledWith(request, expectedOptions));
        });
    });
    mocha_1.describe('write', () => {
        mocha_1.it('invokes write without error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1beta1.WriteRequest());
            const expectedResponse = generateSampleMessage(new protos.google.firestore.v1beta1.WriteResponse());
            client.innerApiCalls.write = stubBidiStreamingCall(expectedResponse);
            const stream = client.write();
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response) => {
                    resolve(response);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
                stream.write(request);
                stream.end();
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.write
                .getCall(0)
                .calledWithExactly({}, undefined));
            assert.deepStrictEqual(stream._transform.getCall(0).args[0], request);
        });
        mocha_1.it('invokes write with error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1beta1.WriteRequest());
            request.database = '';
            const expectedHeaderRequestParams = 'database=';
            const expectedError = new Error('expected');
            client.innerApiCalls.write = stubBidiStreamingCall(undefined, expectedError);
            const stream = client.write();
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response) => {
                    resolve(response);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
                stream.write(request);
                stream.end();
            });
            await assert.rejects(promise, expectedError);
            assert(client.innerApiCalls.write
                .getCall(0)
                .calledWithExactly({}, undefined));
            assert.deepStrictEqual(stream._transform.getCall(0).args[0], request);
        });
    });
    mocha_1.describe('listen', () => {
        mocha_1.it('invokes listen without error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1beta1.ListenRequest());
            const expectedResponse = generateSampleMessage(new protos.google.firestore.v1beta1.ListenResponse());
            client.innerApiCalls.listen = stubBidiStreamingCall(expectedResponse);
            const stream = client.listen();
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response) => {
                    resolve(response);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
                stream.write(request);
                stream.end();
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.listen
                .getCall(0)
                .calledWithExactly({}, undefined));
            assert.deepStrictEqual(stream._transform.getCall(0).args[0], request);
        });
        mocha_1.it('invokes listen with error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1beta1.ListenRequest());
            request.database = '';
            const expectedHeaderRequestParams = 'database=';
            const expectedError = new Error('expected');
            client.innerApiCalls.listen = stubBidiStreamingCall(undefined, expectedError);
            const stream = client.listen();
            const promise = new Promise((resolve, reject) => {
                stream.on('data', (response) => {
                    resolve(response);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
                stream.write(request);
                stream.end();
            });
            await assert.rejects(promise, expectedError);
            assert(client.innerApiCalls.listen
                .getCall(0)
                .calledWithExactly({}, undefined));
            assert.deepStrictEqual(stream._transform.getCall(0).args[0], request);
        });
    });
    mocha_1.describe('listDocuments', () => {
        mocha_1.it('invokes listDocuments without error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1beta1.ListDocumentsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = 'parent=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
                generateSampleMessage(new protos.google.firestore.v1beta1.Document()),
                generateSampleMessage(new protos.google.firestore.v1beta1.Document()),
                generateSampleMessage(new protos.google.firestore.v1beta1.Document()),
            ];
            client.innerApiCalls.listDocuments = stubSimpleCall(expectedResponse);
            const [response] = await client.listDocuments(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.listDocuments
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
        mocha_1.it('invokes listDocuments without error using callback', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1beta1.ListDocumentsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = 'parent=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [
                generateSampleMessage(new protos.google.firestore.v1beta1.Document()),
                generateSampleMessage(new protos.google.firestore.v1beta1.Document()),
                generateSampleMessage(new protos.google.firestore.v1beta1.Document()),
            ];
            client.innerApiCalls.listDocuments = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.listDocuments(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.listDocuments
                .getCall(0)
                .calledWith(request, expectedOptions /*, callback defined above */));
        });
        mocha_1.it('invokes listDocuments with error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1beta1.ListDocumentsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = 'parent=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listDocuments = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listDocuments(request), expectedError);
            assert(client.innerApiCalls.listDocuments
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
        mocha_1.it('invokes listDocumentsStream without error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1beta1.ListDocumentsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = 'parent=';
            const expectedResponse = [
                generateSampleMessage(new protos.google.firestore.v1beta1.Document()),
                generateSampleMessage(new protos.google.firestore.v1beta1.Document()),
                generateSampleMessage(new protos.google.firestore.v1beta1.Document()),
            ];
            client.descriptors.page.listDocuments.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listDocumentsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses = [];
                stream.on('data', (response) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert(client.descriptors.page.listDocuments.createStream
                .getCall(0)
                .calledWith(client.innerApiCalls.listDocuments, request));
            assert.strictEqual(client.descriptors.page.listDocuments
                .createStream.getCall(0).args[2].otherArgs.headers['x-goog-request-params'], expectedHeaderRequestParams);
        });
        mocha_1.it('invokes listDocumentsStream with error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1beta1.ListDocumentsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = 'parent=';
            const expectedError = new Error('expected');
            client.descriptors.page.listDocuments.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listDocumentsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses = [];
                stream.on('data', (response) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert(client.descriptors.page.listDocuments.createStream
                .getCall(0)
                .calledWith(client.innerApiCalls.listDocuments, request));
            assert.strictEqual(client.descriptors.page.listDocuments
                .createStream.getCall(0).args[2].otherArgs.headers['x-goog-request-params'], expectedHeaderRequestParams);
        });
        mocha_1.it('uses async iteration with listDocuments without error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1beta1.ListDocumentsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = 'parent=';
            const expectedResponse = [
                generateSampleMessage(new protos.google.firestore.v1beta1.Document()),
                generateSampleMessage(new protos.google.firestore.v1beta1.Document()),
                generateSampleMessage(new protos.google.firestore.v1beta1.Document()),
            ];
            client.descriptors.page.listDocuments.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses = [];
            const iterable = client.listDocumentsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(client.descriptors.page.listDocuments
                .asyncIterate.getCall(0).args[1], request);
            assert.strictEqual(client.descriptors.page.listDocuments
                .asyncIterate.getCall(0).args[2].otherArgs.headers['x-goog-request-params'], expectedHeaderRequestParams);
        });
        mocha_1.it('uses async iteration with listDocuments with error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1beta1.ListDocumentsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = 'parent=';
            const expectedError = new Error('expected');
            client.descriptors.page.listDocuments.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listDocumentsAsync(request);
            await assert.rejects(async () => {
                const responses = [];
                for await (const resource of iterable) {
                    responses.push(resource);
                }
            });
            assert.deepStrictEqual(client.descriptors.page.listDocuments
                .asyncIterate.getCall(0).args[1], request);
            assert.strictEqual(client.descriptors.page.listDocuments
                .asyncIterate.getCall(0).args[2].otherArgs.headers['x-goog-request-params'], expectedHeaderRequestParams);
        });
    });
    mocha_1.describe('listCollectionIds', () => {
        mocha_1.it('invokes listCollectionIds without error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1beta1.ListCollectionIdsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = 'parent=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [new String(), new String(), new String()];
            client.innerApiCalls.listCollectionIds = stubSimpleCall(expectedResponse);
            const [response] = await client.listCollectionIds(request);
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.listCollectionIds
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
        mocha_1.it('invokes listCollectionIds without error using callback', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1beta1.ListCollectionIdsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = 'parent=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedResponse = [new String(), new String(), new String()];
            client.innerApiCalls.listCollectionIds = stubSimpleCallWithCallback(expectedResponse);
            const promise = new Promise((resolve, reject) => {
                client.listCollectionIds(request, (err, result) => {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(result);
                    }
                });
            });
            const response = await promise;
            assert.deepStrictEqual(response, expectedResponse);
            assert(client.innerApiCalls.listCollectionIds
                .getCall(0)
                .calledWith(request, expectedOptions /*, callback defined above */));
        });
        mocha_1.it('invokes listCollectionIds with error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1beta1.ListCollectionIdsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = 'parent=';
            const expectedOptions = {
                otherArgs: {
                    headers: {
                        'x-goog-request-params': expectedHeaderRequestParams,
                    },
                },
            };
            const expectedError = new Error('expected');
            client.innerApiCalls.listCollectionIds = stubSimpleCall(undefined, expectedError);
            await assert.rejects(client.listCollectionIds(request), expectedError);
            assert(client.innerApiCalls.listCollectionIds
                .getCall(0)
                .calledWith(request, expectedOptions, undefined));
        });
        mocha_1.it('invokes listCollectionIdsStream without error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1beta1.ListCollectionIdsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = 'parent=';
            const expectedResponse = [new String(), new String(), new String()];
            client.descriptors.page.listCollectionIds.createStream = stubPageStreamingCall(expectedResponse);
            const stream = client.listCollectionIdsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses = [];
                stream.on('data', (response) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
            });
            const responses = await promise;
            assert.deepStrictEqual(responses, expectedResponse);
            assert(client.descriptors.page.listCollectionIds.createStream
                .getCall(0)
                .calledWith(client.innerApiCalls.listCollectionIds, request));
            assert.strictEqual(client.descriptors.page.listCollectionIds
                .createStream.getCall(0).args[2].otherArgs.headers['x-goog-request-params'], expectedHeaderRequestParams);
        });
        mocha_1.it('invokes listCollectionIdsStream with error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1beta1.ListCollectionIdsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = 'parent=';
            const expectedError = new Error('expected');
            client.descriptors.page.listCollectionIds.createStream = stubPageStreamingCall(undefined, expectedError);
            const stream = client.listCollectionIdsStream(request);
            const promise = new Promise((resolve, reject) => {
                const responses = [];
                stream.on('data', (response) => {
                    responses.push(response);
                });
                stream.on('end', () => {
                    resolve(responses);
                });
                stream.on('error', (err) => {
                    reject(err);
                });
            });
            await assert.rejects(promise, expectedError);
            assert(client.descriptors.page.listCollectionIds.createStream
                .getCall(0)
                .calledWith(client.innerApiCalls.listCollectionIds, request));
            assert.strictEqual(client.descriptors.page.listCollectionIds
                .createStream.getCall(0).args[2].otherArgs.headers['x-goog-request-params'], expectedHeaderRequestParams);
        });
        mocha_1.it('uses async iteration with listCollectionIds without error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1beta1.ListCollectionIdsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = 'parent=';
            const expectedResponse = [new String(), new String(), new String()];
            client.descriptors.page.listCollectionIds.asyncIterate = stubAsyncIterationCall(expectedResponse);
            const responses = [];
            const iterable = client.listCollectionIdsAsync(request);
            for await (const resource of iterable) {
                responses.push(resource);
            }
            assert.deepStrictEqual(responses, expectedResponse);
            assert.deepStrictEqual(client.descriptors.page.listCollectionIds
                .asyncIterate.getCall(0).args[1], request);
            assert.strictEqual(client.descriptors.page.listCollectionIds
                .asyncIterate.getCall(0).args[2].otherArgs.headers['x-goog-request-params'], expectedHeaderRequestParams);
        });
        mocha_1.it('uses async iteration with listCollectionIds with error', async () => {
            const client = new firestoreModule.FirestoreClient({
                credentials: { client_email: 'bogus', private_key: 'bogus' },
                projectId: 'bogus',
            });
            client.initialize();
            const request = generateSampleMessage(new protos.google.firestore.v1beta1.ListCollectionIdsRequest());
            request.parent = '';
            const expectedHeaderRequestParams = 'parent=';
            const expectedError = new Error('expected');
            client.descriptors.page.listCollectionIds.asyncIterate = stubAsyncIterationCall(undefined, expectedError);
            const iterable = client.listCollectionIdsAsync(request);
            await assert.rejects(async () => {
                const responses = [];
                for await (const resource of iterable) {
                    responses.push(resource);
                }
            });
            assert.deepStrictEqual(client.descriptors.page.listCollectionIds
                .asyncIterate.getCall(0).args[1], request);
            assert.strictEqual(client.descriptors.page.listCollectionIds
                .asyncIterate.getCall(0).args[2].otherArgs.headers['x-goog-request-params'], expectedHeaderRequestParams);
        });
    });
});
//# sourceMappingURL=gapic_firestore_v1beta1.js.map